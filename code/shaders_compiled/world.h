#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input /media/E/git/goldsrctosource/project/code/shaders/world.glsl --output /media/E/git/goldsrctosource/project/code/shaders_compiled/world.h --slang glsl410:hlsl4:metal_macos -b

    Overview:
    =========
    Shader program: 'world':
        Get shader desc: world_shader_desc(sg_query_backend());
        Vertex shader: world_vs
            Attributes:
                ATTR_world_vs_iPos => 0
                ATTR_world_vs_iNormal => 1
                ATTR_world_vs_iUv => 2
            Uniform block 'world_vs_params':
                C struct: world_vs_params_t
                Bind slot: SLOT_world_vs_params => 0
        Fragment shader: world_fs
            Image 'tex':
                Image type: SG_IMAGETYPE_2D
                Sample type: SG_IMAGESAMPLETYPE_FLOAT
                Multisampled: false
                Bind slot: SLOT_tex => 0
            Sampler 'smp':
                Type: SG_SAMPLERTYPE_FILTERING
                Bind slot: SLOT_smp => 0
            Image Sampler Pair 'tex_smp':
                Image: tex
                Sampler: smp
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before world.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_world_vs_iPos (0)
#define ATTR_world_vs_iNormal (1)
#define ATTR_world_vs_iUv (2)
#define SLOT_world_vs_params (0)
#define SLOT_tex (0)
#define SLOT_smp (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct world_vs_params_t {
    mat4 mvp;
    v3 uCamOrigin;
    uint8_t _pad_76[4];
} world_vs_params_t;
#pragma pack(pop)
/*
    #version 410

    uniform vec4 world_vs_params[5];
    layout(location = 0) in vec3 iPos;
    layout(location = 0) out vec2 uv;
    layout(location = 2) in vec2 iUv;
    layout(location = 1) out vec3 normal;
    layout(location = 1) in vec3 iNormal;
    layout(location = 2) out vec3 camOrigin;
    layout(location = 3) out vec3 surfacePos;

    void main()
    {
        gl_Position = mat4(world_vs_params[0], world_vs_params[1], world_vs_params[2], world_vs_params[3]) * vec4(iPos, 1.0);
        uv = iUv;
        normal = iNormal;
        camOrigin = world_vs_params[4].xyz;
        surfacePos = iPos;
    }

*/
static const uint8_t world_vs_source_glsl410[549] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x77,0x6f,0x72,0x6c,0x64,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x69,0x50,0x6f,0x73,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,
    0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x69,0x55,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x69,0x4e,0x6f,0x72,0x6d,0x61,0x6c,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,
    0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x73,0x75,0x72,0x66,0x61,0x63,0x65,
    0x50,0x6f,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x77,0x6f,0x72,0x6c,0x64,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x77,
    0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,
    0x5d,0x2c,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x34,0x28,0x69,0x50,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x69,0x55,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x69,0x4e,0x6f,0x72,0x6d,0x61,0x6c,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x20,
    0x3d,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x75,
    0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x3d,0x20,0x69,0x50,0x6f,0x73,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 410

    uniform sampler2D tex_smp;

    layout(location = 1) in vec3 normal;
    layout(location = 3) in vec3 surfacePos;
    layout(location = 2) in vec3 camOrigin;
    layout(location = 0) in vec2 uv;
    layout(location = 0) out vec4 frag_color;

    vec3 ToLinear(vec3 srgb)
    {
        bvec3 _53 = lessThan(srgb, vec3(0.040449999272823333740234375));
        vec3 _58 = srgb * vec3(0.077399380505084991455078125);
        vec3 _68 = pow(abs((srgb + vec3(0.054999999701976776123046875)) * vec3(0.94786727428436279296875)), vec3(2.400000095367431640625));
        return vec3(_53.x ? _58.x : _68.x, _53.y ? _58.y : _68.y, _53.z ? _58.z : _68.z);
    }

    vec3 ToSrgb(vec3 linearRGB)
    {
        bvec3 _23 = lessThan(linearRGB, vec3(0.00313066854141652584075927734375));
        vec3 _35 = fma(vec3(1.05499994754791259765625), pow(abs(linearRGB), vec3(0.4166666567325592041015625)), vec3(-0.054999999701976776123046875));
        vec3 _40 = linearRGB * vec3(12.9200000762939453125);
        return vec3(_23.x ? _40.x : _35.x, _23.y ? _40.y : _35.y, _23.z ? _40.z : _35.z);
    }

    void main()
    {
        vec3 param = texture(tex_smp, uv / vec2(textureSize(tex_smp, 0))).xyz;
        vec3 param_1 = ToLinear(param) * abs(dot(normal, normalize(surfacePos - camOrigin)));
        frag_color = vec4(ToSrgb(param_1), 1.0);
    }

*/
static const uint8_t world_fs_source_glsl410[1246] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x73,0x75,0x72,0x66,
    0x61,0x63,0x65,0x50,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x33,0x20,0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,
    0x20,0x54,0x6f,0x4c,0x69,0x6e,0x65,0x61,0x72,0x28,0x76,0x65,0x63,0x33,0x20,0x73,
    0x72,0x67,0x62,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x62,0x76,0x65,0x63,0x33,
    0x20,0x5f,0x35,0x33,0x20,0x3d,0x20,0x6c,0x65,0x73,0x73,0x54,0x68,0x61,0x6e,0x28,
    0x73,0x72,0x67,0x62,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x34,0x30,
    0x34,0x34,0x39,0x39,0x39,0x39,0x32,0x37,0x32,0x38,0x32,0x33,0x33,0x33,0x33,0x37,
    0x34,0x30,0x32,0x33,0x34,0x33,0x37,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x5f,0x35,0x38,0x20,0x3d,0x20,0x73,0x72,0x67,0x62,0x20,
    0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x37,0x37,0x33,0x39,0x39,0x33,
    0x38,0x30,0x35,0x30,0x35,0x30,0x38,0x34,0x39,0x39,0x31,0x34,0x35,0x35,0x30,0x37,
    0x38,0x31,0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x5f,0x36,0x38,0x20,0x3d,0x20,0x70,0x6f,0x77,0x28,0x61,0x62,0x73,0x28,0x28,0x73,
    0x72,0x67,0x62,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x35,0x34,
    0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x30,0x31,0x39,0x37,0x36,0x37,0x37,0x36,0x31,
    0x32,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x33,0x28,0x30,0x2e,0x39,0x34,0x37,0x38,0x36,0x37,0x32,0x37,0x34,0x32,0x38,0x34,
    0x33,0x36,0x32,0x37,0x39,0x32,0x39,0x36,0x38,0x37,0x35,0x29,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x28,0x32,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x39,0x35,0x33,
    0x36,0x37,0x34,0x33,0x31,0x36,0x34,0x30,0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,
    0x35,0x33,0x2e,0x78,0x20,0x3f,0x20,0x5f,0x35,0x38,0x2e,0x78,0x20,0x3a,0x20,0x5f,
    0x36,0x38,0x2e,0x78,0x2c,0x20,0x5f,0x35,0x33,0x2e,0x79,0x20,0x3f,0x20,0x5f,0x35,
    0x38,0x2e,0x79,0x20,0x3a,0x20,0x5f,0x36,0x38,0x2e,0x79,0x2c,0x20,0x5f,0x35,0x33,
    0x2e,0x7a,0x20,0x3f,0x20,0x5f,0x35,0x38,0x2e,0x7a,0x20,0x3a,0x20,0x5f,0x36,0x38,
    0x2e,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x54,0x6f,0x53,
    0x72,0x67,0x62,0x28,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,
    0x47,0x42,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x62,0x76,0x65,0x63,0x33,0x20,
    0x5f,0x32,0x33,0x20,0x3d,0x20,0x6c,0x65,0x73,0x73,0x54,0x68,0x61,0x6e,0x28,0x6c,
    0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x30,0x30,0x33,0x31,0x33,0x30,0x36,0x36,0x38,0x35,0x34,0x31,0x34,0x31,0x36,
    0x35,0x32,0x35,0x38,0x34,0x30,0x37,0x35,0x39,0x32,0x37,0x37,0x33,0x34,0x33,0x37,
    0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,
    0x35,0x20,0x3d,0x20,0x66,0x6d,0x61,0x28,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,
    0x35,0x34,0x39,0x39,0x39,0x39,0x34,0x37,0x35,0x34,0x37,0x39,0x31,0x32,0x35,0x39,
    0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x2c,0x20,0x70,0x6f,0x77,0x28,0x61,0x62,0x73,
    0x28,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,0x29,0x2c,0x20,0x76,0x65,0x63,
    0x33,0x28,0x30,0x2e,0x34,0x31,0x36,0x36,0x36,0x36,0x36,0x35,0x36,0x37,0x33,0x32,
    0x35,0x35,0x39,0x32,0x30,0x34,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x29,0x29,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x28,0x2d,0x30,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,
    0x39,0x39,0x37,0x30,0x31,0x39,0x37,0x36,0x37,0x37,0x36,0x31,0x32,0x33,0x30,0x34,
    0x36,0x38,0x37,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x5f,0x34,0x30,0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,
    0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x32,0x2e,0x39,0x32,0x30,0x30,0x30,
    0x30,0x30,0x37,0x36,0x32,0x39,0x33,0x39,0x34,0x35,0x33,0x31,0x32,0x35,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x33,
    0x28,0x5f,0x32,0x33,0x2e,0x78,0x20,0x3f,0x20,0x5f,0x34,0x30,0x2e,0x78,0x20,0x3a,
    0x20,0x5f,0x33,0x35,0x2e,0x78,0x2c,0x20,0x5f,0x32,0x33,0x2e,0x79,0x20,0x3f,0x20,
    0x5f,0x34,0x30,0x2e,0x79,0x20,0x3a,0x20,0x5f,0x33,0x35,0x2e,0x79,0x2c,0x20,0x5f,
    0x32,0x33,0x2e,0x7a,0x20,0x3f,0x20,0x5f,0x34,0x30,0x2e,0x7a,0x20,0x3a,0x20,0x5f,
    0x33,0x35,0x2e,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x75,0x76,0x20,0x2f,0x20,0x76,
    0x65,0x63,0x32,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,
    0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x30,0x29,0x29,0x29,0x2e,0x78,0x79,
    0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x20,0x3d,0x20,0x54,0x6f,0x4c,0x69,0x6e,0x65,0x61,0x72,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x29,0x20,0x2a,0x20,0x61,0x62,0x73,0x28,0x64,0x6f,0x74,0x28,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,
    0x65,0x28,0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x2d,0x20,0x63,
    0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    cbuffer world_vs_params : register(b0)
    {
        row_major float4x4 _20_mvp : packoffset(c0);
        float3 _20_uCamOrigin : packoffset(c4);
    };


    static float4 gl_Position;
    static float3 iPos;
    static float2 uv;
    static float2 iUv;
    static float3 normal;
    static float3 iNormal;
    static float3 camOrigin;
    static float3 surfacePos;

    struct SPIRV_Cross_Input
    {
        float3 iPos : TEXCOORD0;
        float3 iNormal : TEXCOORD1;
        float2 iUv : TEXCOORD2;
    };

    struct SPIRV_Cross_Output
    {
        float2 uv : TEXCOORD0;
        float3 normal : TEXCOORD1;
        float3 camOrigin : TEXCOORD2;
        float3 surfacePos : TEXCOORD3;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        gl_Position = mul(float4(iPos, 1.0f), _20_mvp);
        uv = iUv;
        normal = iNormal;
        camOrigin = _20_uCamOrigin;
        surfacePos = iPos;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        iPos = stage_input.iPos;
        iUv = stage_input.iUv;
        iNormal = stage_input.iNormal;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.uv = uv;
        stage_output.normal = normal;
        stage_output.camOrigin = camOrigin;
        stage_output.surfacePos = surfacePos;
        return stage_output;
    }
*/
static const uint8_t world_vs_source_hlsl4[1218] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,
    0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x5f,0x32,0x30,0x5f,0x6d,0x76,0x70,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x5f,0x32,0x30,0x5f,0x75,0x43,0x61,0x6d,0x4f,0x72,0x69,
    0x67,0x69,0x6e,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,
    0x28,0x63,0x34,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x69,0x50,0x6f,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x69,0x55,0x76,0x3b,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x69,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x61,0x6d,0x4f,0x72,0x69,
    0x67,0x69,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x3b,0x0a,0x0a,
    0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,
    0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x69,0x50,0x6f,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x69,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x69,0x55,0x76,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x32,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,
    0x76,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,
    0x69,0x6e,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x73,0x75,0x72,0x66,0x61,
    0x63,0x65,0x50,0x6f,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x50,0x6f,
    0x73,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x5f,0x32,0x30,0x5f,0x6d,0x76,
    0x70,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x69,0x55,0x76,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x69,
    0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x61,0x6d,0x4f,
    0x72,0x69,0x67,0x69,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x30,0x5f,0x75,0x43,0x61,0x6d,
    0x4f,0x72,0x69,0x67,0x69,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x75,0x72,0x66,
    0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x3d,0x20,0x69,0x50,0x6f,0x73,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x50,0x6f,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,
    0x74,0x2e,0x69,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x55,0x76,0x20,
    0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x69,0x55,
    0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x69,0x4e,0x6f,
    0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x75,0x76,0x20,0x3d,0x20,0x75,0x76,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x2e,0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x20,0x3d,
    0x20,0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x73,0x75,0x72,
    0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x3d,0x20,0x73,0x75,0x72,0x66,0x61,0x63,
    0x65,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,
    0x0a,0x00,
};
/*
    Texture2D<float4> tex : register(t0);
    SamplerState smp : register(s0);

    static float3 normal;
    static float3 surfacePos;
    static float3 camOrigin;
    static float2 uv;
    static float4 frag_color;

    struct SPIRV_Cross_Input
    {
        float2 uv : TEXCOORD0;
        float3 normal : TEXCOORD1;
        float3 camOrigin : TEXCOORD2;
        float3 surfacePos : TEXCOORD3;
    };

    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };

    uint2 spvTextureSize(Texture2D<float4> Tex, uint Level, out uint Param)
    {
        uint2 ret;
        Tex.GetDimensions(Level, ret.x, ret.y, Param);
        return ret;
    }

    float3 ToLinear(float3 srgb)
    {
        bool3 _53 = bool3(srgb.x < 0.040449999272823333740234375f.xxx.x, srgb.y < 0.040449999272823333740234375f.xxx.y, srgb.z < 0.040449999272823333740234375f.xxx.z);
        float3 _58 = srgb * 0.077399380505084991455078125f.xxx;
        float3 _68 = pow(abs((srgb + 0.054999999701976776123046875f.xxx) * 0.94786727428436279296875f.xxx), 2.400000095367431640625f.xxx);
        return float3(_53.x ? _58.x : _68.x, _53.y ? _58.y : _68.y, _53.z ? _58.z : _68.z);
    }

    float3 ToSrgb(float3 linearRGB)
    {
        bool3 _23 = bool3(linearRGB.x < 0.00313066854141652584075927734375f.xxx.x, linearRGB.y < 0.00313066854141652584075927734375f.xxx.y, linearRGB.z < 0.00313066854141652584075927734375f.xxx.z);
        float3 _35 = mad(1.05499994754791259765625f.xxx, pow(abs(linearRGB), 0.4166666567325592041015625f.xxx), (-0.054999999701976776123046875f).xxx);
        float3 _40 = linearRGB * 12.9200000762939453125f.xxx;
        return float3(_23.x ? _40.x : _35.x, _23.y ? _40.y : _35.y, _23.z ? _40.z : _35.z);
    }

    void frag_main()
    {
        uint _112_dummy_parameter;
        float3 param = tex.Sample(smp, uv / float2(int2(spvTextureSize(tex, uint(0), _112_dummy_parameter)))).xyz;
        float3 param_1 = ToLinear(param) * abs(dot(normal, normalize(surfacePos - camOrigin)));
        frag_color = float4(ToSrgb(param_1), 1.0f);
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        normal = stage_input.normal;
        surfacePos = stage_input.surfacePos;
        camOrigin = stage_input.camOrigin;
        uv = stage_input.uv;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
static const uint8_t world_fs_source_hlsl4[2204] = {
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x3e,0x20,0x74,0x65,0x78,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,
    0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,
    0x74,0x65,0x20,0x73,0x6d,0x70,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,
    0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x73,0x75,0x72,0x66,
    0x61,0x63,0x65,0x50,0x6f,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,
    0x76,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x75,0x76,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x61,
    0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,
    0x52,0x44,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x33,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,
    0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x75,0x69,0x6e,0x74,0x32,0x20,0x73,0x70,0x76,0x54,0x65,0x78,0x74,0x75,0x72,0x65,
    0x53,0x69,0x7a,0x65,0x28,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x54,0x65,0x78,0x2c,0x20,0x75,0x69,0x6e,0x74,
    0x20,0x4c,0x65,0x76,0x65,0x6c,0x2c,0x20,0x6f,0x75,0x74,0x20,0x75,0x69,0x6e,0x74,
    0x20,0x50,0x61,0x72,0x61,0x6d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,
    0x6e,0x74,0x32,0x20,0x72,0x65,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,
    0x2e,0x47,0x65,0x74,0x44,0x69,0x6d,0x65,0x6e,0x73,0x69,0x6f,0x6e,0x73,0x28,0x4c,
    0x65,0x76,0x65,0x6c,0x2c,0x20,0x72,0x65,0x74,0x2e,0x78,0x2c,0x20,0x72,0x65,0x74,
    0x2e,0x79,0x2c,0x20,0x50,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x72,0x65,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x54,0x6f,0x4c,0x69,0x6e,0x65,0x61,0x72,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x73,0x72,0x67,0x62,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x62,0x6f,0x6f,0x6c,0x33,0x20,0x5f,0x35,0x33,0x20,0x3d,0x20,0x62,0x6f,
    0x6f,0x6c,0x33,0x28,0x73,0x72,0x67,0x62,0x2e,0x78,0x20,0x3c,0x20,0x30,0x2e,0x30,
    0x34,0x30,0x34,0x34,0x39,0x39,0x39,0x39,0x32,0x37,0x32,0x38,0x32,0x33,0x33,0x33,
    0x33,0x37,0x34,0x30,0x32,0x33,0x34,0x33,0x37,0x35,0x66,0x2e,0x78,0x78,0x78,0x2e,
    0x78,0x2c,0x20,0x73,0x72,0x67,0x62,0x2e,0x79,0x20,0x3c,0x20,0x30,0x2e,0x30,0x34,
    0x30,0x34,0x34,0x39,0x39,0x39,0x39,0x32,0x37,0x32,0x38,0x32,0x33,0x33,0x33,0x33,
    0x37,0x34,0x30,0x32,0x33,0x34,0x33,0x37,0x35,0x66,0x2e,0x78,0x78,0x78,0x2e,0x79,
    0x2c,0x20,0x73,0x72,0x67,0x62,0x2e,0x7a,0x20,0x3c,0x20,0x30,0x2e,0x30,0x34,0x30,
    0x34,0x34,0x39,0x39,0x39,0x39,0x32,0x37,0x32,0x38,0x32,0x33,0x33,0x33,0x33,0x37,
    0x34,0x30,0x32,0x33,0x34,0x33,0x37,0x35,0x66,0x2e,0x78,0x78,0x78,0x2e,0x7a,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x35,0x38,
    0x20,0x3d,0x20,0x73,0x72,0x67,0x62,0x20,0x2a,0x20,0x30,0x2e,0x30,0x37,0x37,0x33,
    0x39,0x39,0x33,0x38,0x30,0x35,0x30,0x35,0x30,0x38,0x34,0x39,0x39,0x31,0x34,0x35,
    0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x66,0x2e,0x78,0x78,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,0x36,0x38,0x20,0x3d,0x20,0x70,
    0x6f,0x77,0x28,0x61,0x62,0x73,0x28,0x28,0x73,0x72,0x67,0x62,0x20,0x2b,0x20,0x30,
    0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x30,0x31,0x39,0x37,0x36,
    0x37,0x37,0x36,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x66,0x2e,0x78,0x78,
    0x78,0x29,0x20,0x2a,0x20,0x30,0x2e,0x39,0x34,0x37,0x38,0x36,0x37,0x32,0x37,0x34,
    0x32,0x38,0x34,0x33,0x36,0x32,0x37,0x39,0x32,0x39,0x36,0x38,0x37,0x35,0x66,0x2e,
    0x78,0x78,0x78,0x29,0x2c,0x20,0x32,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x39,
    0x35,0x33,0x36,0x37,0x34,0x33,0x31,0x36,0x34,0x30,0x36,0x32,0x35,0x66,0x2e,0x78,
    0x78,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x33,0x2e,0x78,0x20,0x3f,0x20,0x5f,
    0x35,0x38,0x2e,0x78,0x20,0x3a,0x20,0x5f,0x36,0x38,0x2e,0x78,0x2c,0x20,0x5f,0x35,
    0x33,0x2e,0x79,0x20,0x3f,0x20,0x5f,0x35,0x38,0x2e,0x79,0x20,0x3a,0x20,0x5f,0x36,
    0x38,0x2e,0x79,0x2c,0x20,0x5f,0x35,0x33,0x2e,0x7a,0x20,0x3f,0x20,0x5f,0x35,0x38,
    0x2e,0x7a,0x20,0x3a,0x20,0x5f,0x36,0x38,0x2e,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x33,0x20,0x5f,0x32,0x33,0x20,
    0x3d,0x20,0x62,0x6f,0x6f,0x6c,0x33,0x28,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,
    0x42,0x2e,0x78,0x20,0x3c,0x20,0x30,0x2e,0x30,0x30,0x33,0x31,0x33,0x30,0x36,0x36,
    0x38,0x35,0x34,0x31,0x34,0x31,0x36,0x35,0x32,0x35,0x38,0x34,0x30,0x37,0x35,0x39,
    0x32,0x37,0x37,0x33,0x34,0x33,0x37,0x35,0x66,0x2e,0x78,0x78,0x78,0x2e,0x78,0x2c,
    0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,0x2e,0x79,0x20,0x3c,0x20,0x30,
    0x2e,0x30,0x30,0x33,0x31,0x33,0x30,0x36,0x36,0x38,0x35,0x34,0x31,0x34,0x31,0x36,
    0x35,0x32,0x35,0x38,0x34,0x30,0x37,0x35,0x39,0x32,0x37,0x37,0x33,0x34,0x33,0x37,
    0x35,0x66,0x2e,0x78,0x78,0x78,0x2e,0x79,0x2c,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,
    0x52,0x47,0x42,0x2e,0x7a,0x20,0x3c,0x20,0x30,0x2e,0x30,0x30,0x33,0x31,0x33,0x30,
    0x36,0x36,0x38,0x35,0x34,0x31,0x34,0x31,0x36,0x35,0x32,0x35,0x38,0x34,0x30,0x37,
    0x35,0x39,0x32,0x37,0x37,0x33,0x34,0x33,0x37,0x35,0x66,0x2e,0x78,0x78,0x78,0x2e,
    0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x5f,
    0x33,0x35,0x20,0x3d,0x20,0x6d,0x61,0x64,0x28,0x31,0x2e,0x30,0x35,0x34,0x39,0x39,
    0x39,0x39,0x34,0x37,0x35,0x34,0x37,0x39,0x31,0x32,0x35,0x39,0x37,0x36,0x35,0x36,
    0x32,0x35,0x66,0x2e,0x78,0x78,0x78,0x2c,0x20,0x70,0x6f,0x77,0x28,0x61,0x62,0x73,
    0x28,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,0x29,0x2c,0x20,0x30,0x2e,0x34,
    0x31,0x36,0x36,0x36,0x36,0x36,0x35,0x36,0x37,0x33,0x32,0x35,0x35,0x39,0x32,0x30,
    0x34,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x66,0x2e,0x78,0x78,0x78,0x29,0x2c,0x20,
    0x28,0x2d,0x30,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x30,0x31,
    0x39,0x37,0x36,0x37,0x37,0x36,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x66,
    0x29,0x2e,0x78,0x78,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x20,0x5f,0x34,0x30,0x20,0x3d,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,
    0x47,0x42,0x20,0x2a,0x20,0x31,0x32,0x2e,0x39,0x32,0x30,0x30,0x30,0x30,0x30,0x37,
    0x36,0x32,0x39,0x33,0x39,0x34,0x35,0x33,0x31,0x32,0x35,0x66,0x2e,0x78,0x78,0x78,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x28,0x5f,0x32,0x33,0x2e,0x78,0x20,0x3f,0x20,0x5f,0x34,0x30,0x2e,
    0x78,0x20,0x3a,0x20,0x5f,0x33,0x35,0x2e,0x78,0x2c,0x20,0x5f,0x32,0x33,0x2e,0x79,
    0x20,0x3f,0x20,0x5f,0x34,0x30,0x2e,0x79,0x20,0x3a,0x20,0x5f,0x33,0x35,0x2e,0x79,
    0x2c,0x20,0x5f,0x32,0x33,0x2e,0x7a,0x20,0x3f,0x20,0x5f,0x34,0x30,0x2e,0x7a,0x20,
    0x3a,0x20,0x5f,0x33,0x35,0x2e,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x31,0x31,0x32,0x5f,0x64,0x75,
    0x6d,0x6d,0x79,0x5f,0x70,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,
    0x3d,0x20,0x74,0x65,0x78,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,
    0x2c,0x20,0x75,0x76,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x69,0x6e,
    0x74,0x32,0x28,0x73,0x70,0x76,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,
    0x65,0x28,0x74,0x65,0x78,0x2c,0x20,0x75,0x69,0x6e,0x74,0x28,0x30,0x29,0x2c,0x20,
    0x5f,0x31,0x31,0x32,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x65,0x74,0x65,0x72,0x29,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x20,0x3d,0x20,0x54,0x6f,0x4c,0x69,0x6e,0x65,0x61,0x72,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x29,0x20,0x2a,0x20,0x61,0x62,0x73,0x28,0x64,0x6f,0x74,0x28,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x73,
    0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x2d,0x20,0x63,0x61,0x6d,0x4f,
    0x72,0x69,0x67,0x69,0x6e,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x29,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,
    0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x75,0x72,0x66,0x61,
    0x63,0x65,0x50,0x6f,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x20,0x3d,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x63,0x61,0x6d,0x4f,
    0x72,0x69,0x67,0x69,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x75,0x76,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct world_vs_params
    {
        float4x4 mvp;
        float3 uCamOrigin;
    };

    struct main0_out
    {
        float2 uv [[user(locn0)]];
        float3 normal [[user(locn1)]];
        float3 camOrigin [[user(locn2)]];
        float3 surfacePos [[user(locn3)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float3 iPos [[attribute(0)]];
        float3 iNormal [[attribute(1)]];
        float2 iUv [[attribute(2)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant world_vs_params& _20 [[buffer(0)]])
    {
        main0_out out = {};
        out.gl_Position = _20.mvp * float4(in.iPos, 1.0);
        out.uv = in.iUv;
        out.normal = in.iNormal;
        out.camOrigin = _20.uCamOrigin;
        out.surfacePos = in.iPos;
        return out;
    }

*/
static const uint8_t world_vs_source_metal_macos[781] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x77,
    0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x6d,0x76,
    0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x75,0x43,
    0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,
    0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x61,
    0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x33,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x69,0x50,0x6f,0x73,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x69,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x20,
    0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x69,0x55,0x76,
    0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x32,0x29,0x5d,
    0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,
    0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x26,0x20,0x5f,0x32,0x30,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,0x28,0x30,
    0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,0x6d,0x76,0x70,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x69,0x50,0x6f,0x73,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x75,0x76,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x69,0x55,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x69,0x4e,
    0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x63,
    0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x30,0x2e,0x75,
    0x43,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,
    0x75,0x74,0x2e,0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x3d,0x20,
    0x69,0x6e,0x2e,0x69,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };

    struct main0_in
    {
        float2 uv [[user(locn0)]];
        float3 normal [[user(locn1)]];
        float3 camOrigin [[user(locn2)]];
        float3 surfacePos [[user(locn3)]];
    };

    static inline __attribute__((always_inline))
    float3 ToLinear(thread const float3& srgb)
    {
        return select(pow(abs((srgb + float3(0.054999999701976776123046875)) * float3(0.94786727428436279296875)), float3(2.400000095367431640625)), srgb * float3(0.077399380505084991455078125), srgb < float3(0.040449999272823333740234375));
    }

    static inline __attribute__((always_inline))
    float3 ToSrgb(thread const float3& linearRGB)
    {
        return select(fma(float3(1.05499994754791259765625), pow(abs(linearRGB), float3(0.4166666567325592041015625)), float3(-0.054999999701976776123046875)), linearRGB * float3(12.9200000762939453125), linearRGB < float3(0.00313066854141652584075927734375));
    }

    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> tex [[texture(0)]], sampler smp [[sampler(0)]])
    {
        main0_out out = {};
        float3 param = tex.sample(smp, (in.uv / float2(int2(tex.get_width(), tex.get_height())))).xyz;
        float3 param_1 = ToLinear(param) * abs(dot(in.normal, fast::normalize(in.surfacePos - in.camOrigin)));
        out.frag_color = float4(ToSrgb(param_1), 1.0);
        return out;
    }

*/
static const uint8_t world_fs_source_metal_macos[1456] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x20,0x5b,0x5b,0x75,0x73,
    0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x61,0x6d,0x4f,0x72,
    0x69,0x67,0x69,0x6e,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,
    0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,
    0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x33,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,
    0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,
    0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x20,0x54,0x6f,0x4c,0x69,0x6e,0x65,0x61,0x72,0x28,0x74,0x68,
    0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x26,0x20,0x73,0x72,0x67,0x62,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x65,0x6c,0x65,0x63,0x74,0x28,0x70,0x6f,0x77,
    0x28,0x61,0x62,0x73,0x28,0x28,0x73,0x72,0x67,0x62,0x20,0x2b,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x37,
    0x30,0x31,0x39,0x37,0x36,0x37,0x37,0x36,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,
    0x35,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x39,
    0x34,0x37,0x38,0x36,0x37,0x32,0x37,0x34,0x32,0x38,0x34,0x33,0x36,0x32,0x37,0x39,
    0x32,0x39,0x36,0x38,0x37,0x35,0x29,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x28,0x32,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x39,0x35,0x33,0x36,0x37,0x34,
    0x33,0x31,0x36,0x34,0x30,0x36,0x32,0x35,0x29,0x29,0x2c,0x20,0x73,0x72,0x67,0x62,
    0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x37,0x37,0x33,
    0x39,0x39,0x33,0x38,0x30,0x35,0x30,0x35,0x30,0x38,0x34,0x39,0x39,0x31,0x34,0x35,
    0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x29,0x2c,0x20,0x73,0x72,0x67,0x62,0x20,0x3c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x34,0x30,0x34,0x34,0x39,
    0x39,0x39,0x39,0x32,0x37,0x32,0x38,0x32,0x33,0x33,0x33,0x33,0x37,0x34,0x30,0x32,
    0x33,0x34,0x33,0x37,0x35,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,
    0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,
    0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,
    0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,0x6c,0x69,0x6e,0x65,
    0x61,0x72,0x52,0x47,0x42,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x73,0x65,0x6c,0x65,0x63,0x74,0x28,0x66,0x6d,0x61,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x31,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x34,
    0x37,0x35,0x34,0x37,0x39,0x31,0x32,0x35,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x29,
    0x2c,0x20,0x70,0x6f,0x77,0x28,0x61,0x62,0x73,0x28,0x6c,0x69,0x6e,0x65,0x61,0x72,
    0x52,0x47,0x42,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x34,
    0x31,0x36,0x36,0x36,0x36,0x36,0x35,0x36,0x37,0x33,0x32,0x35,0x35,0x39,0x32,0x30,
    0x34,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x29,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x2d,0x30,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x37,
    0x30,0x31,0x39,0x37,0x36,0x37,0x37,0x36,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,
    0x35,0x29,0x29,0x2c,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,0x20,0x2a,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x31,0x32,0x2e,0x39,0x32,0x30,0x30,0x30,
    0x30,0x30,0x37,0x36,0x32,0x39,0x33,0x39,0x34,0x35,0x33,0x31,0x32,0x35,0x29,0x2c,
    0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,0x20,0x3c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x30,0x33,0x31,0x33,0x30,0x36,0x36,0x38,0x35,
    0x34,0x31,0x34,0x31,0x36,0x35,0x32,0x35,0x38,0x34,0x30,0x37,0x35,0x39,0x32,0x37,
    0x37,0x33,0x34,0x33,0x37,0x35,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x72,0x61,
    0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,
    0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,
    0x20,0x74,0x65,0x78,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,
    0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,0x6d,0x70,
    0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,
    0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,0x20,0x28,0x69,
    0x6e,0x2e,0x75,0x76,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x69,0x6e,
    0x74,0x32,0x28,0x74,0x65,0x78,0x2e,0x67,0x65,0x74,0x5f,0x77,0x69,0x64,0x74,0x68,
    0x28,0x29,0x2c,0x20,0x74,0x65,0x78,0x2e,0x67,0x65,0x74,0x5f,0x68,0x65,0x69,0x67,
    0x68,0x74,0x28,0x29,0x29,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x20,0x3d,0x20,0x54,0x6f,0x4c,0x69,0x6e,0x65,0x61,0x72,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x29,0x20,0x2a,0x20,0x61,0x62,0x73,0x28,0x64,0x6f,0x74,0x28,0x69,0x6e,0x2e,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x69,0x6e,0x2e,0x73,0x75,0x72,0x66,0x61,
    0x63,0x65,0x50,0x6f,0x73,0x20,0x2d,0x20,0x69,0x6e,0x2e,0x63,0x61,0x6d,0x4f,0x72,
    0x69,0x67,0x69,0x6e,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x28,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
static inline const sg_shader_desc* world_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.attrs[0].name = "iPos";
            desc.attrs[1].name = "iNormal";
            desc.attrs[2].name = "iUv";
            desc.vs.source = (const char*)world_vs_source_glsl410;
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 80;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.vs.uniform_blocks[0].uniforms[0].name = "world_vs_params";
            desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 5;
            desc.fs.source = (const char*)world_fs_source_glsl410;
            desc.fs.entry = "main";
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.fs.image_sampler_pairs[0].glsl_name = "tex_smp";
            desc.label = "world_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.attrs[0].sem_name = "TEXCOORD";
            desc.attrs[0].sem_index = 0;
            desc.attrs[1].sem_name = "TEXCOORD";
            desc.attrs[1].sem_index = 1;
            desc.attrs[2].sem_name = "TEXCOORD";
            desc.attrs[2].sem_index = 2;
            desc.vs.source = (const char*)world_vs_source_hlsl4;
            desc.vs.d3d11_target = "vs_4_0";
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 80;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.source = (const char*)world_fs_source_hlsl4;
            desc.fs.d3d11_target = "ps_4_0";
            desc.fs.entry = "main";
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.label = "world_shader";
        }
        return &desc;
    }
    if (backend == SG_BACKEND_METAL_MACOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vs.source = (const char*)world_vs_source_metal_macos;
            desc.vs.entry = "main0";
            desc.vs.uniform_blocks[0].size = 80;
            desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.fs.source = (const char*)world_fs_source_metal_macos;
            desc.fs.entry = "main0";
            desc.fs.images[0].used = true;
            desc.fs.images[0].multisampled = false;
            desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
            desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.fs.samplers[0].used = true;
            desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.fs.image_sampler_pairs[0].used = true;
            desc.fs.image_sampler_pairs[0].image_slot = 0;
            desc.fs.image_sampler_pairs[0].sampler_slot = 0;
            desc.label = "world_shader";
        }
        return &desc;
    }
    return 0;
}
