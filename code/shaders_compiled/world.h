#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input code/shaders/world.glsl --output code/shaders_compiled/world.h --slang glsl330:hlsl4:metal_macos -b

    Overview:

        Shader program 'world':
            Get shader desc: world_shader_desc(sg_query_backend());
            Vertex shader: world_vs
                Attribute slots:
                    ATTR_world_vs_iPos = 0
                    ATTR_world_vs_iNormal = 1
                    ATTR_world_vs_iUv = 2
                Uniform block 'world_vs_params':
                    C struct: world_vs_params_t
                    Bind slot: SLOT_world_vs_params = 0
            Fragment shader: world_fs
                Image 'tex':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex = 0


    Shader descriptor structs:

        sg_shader world = sg_make_shader(world_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'world_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_world_vs_iPos] = { ... },
                    [ATTR_world_vs_iNormal] = { ... },
                    [ATTR_world_vs_iUv] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_tex = 0;

    Bind slot and C-struct for uniform block 'world_vs_params':

        world_vs_params_t world_vs_params = {
            .mvp = ...;
            .uCamOrigin = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_world_vs_params, &SG_RANGE(world_vs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_world_vs_iPos (0)
#define ATTR_world_vs_iNormal (1)
#define ATTR_world_vs_iUv (2)
#define SLOT_tex (0)
#define SLOT_world_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct world_vs_params_t {
    hmm_mat4 mvp;
    hmm_vec3 uCamOrigin;
    uint8_t _pad_76[4];
} world_vs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 world_vs_params[5];
    layout(location = 0) in vec3 iPos;
    out vec2 uv;
    layout(location = 2) in vec2 iUv;
    out vec3 normal;
    layout(location = 1) in vec3 iNormal;
    out vec3 camOrigin;
    out vec3 surfacePos;
    
    void main()
    {
        gl_Position = mat4(world_vs_params[0], world_vs_params[1], world_vs_params[2], world_vs_params[3]) * vec4(iPos, 1.0);
        uv = iUv;
        normal = iNormal;
        camOrigin = world_vs_params[4].xyz;
        surfacePos = iPos;
    }
    
*/
static const char world_vs_source_glsl330[465] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x77,0x6f,0x72,0x6c,0x64,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x69,0x50,0x6f,0x73,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x69,0x55,0x76,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x69,
    0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,
    0x20,0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x3b,0x0a,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x33,0x20,0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x77,0x6f,0x72,0x6c,0x64,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x77,
    0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,
    0x5d,0x2c,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x69,0x50,
    0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,
    0x20,0x3d,0x20,0x69,0x55,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x20,0x3d,0x20,0x69,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x20,0x3d,0x20,0x77,0x6f,
    0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,
    0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x75,0x72,0x66,0x61,0x63,
    0x65,0x50,0x6f,0x73,0x20,0x3d,0x20,0x69,0x50,0x6f,0x73,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #version 330
    
    uniform sampler2D tex;
    
    in vec3 normal;
    in vec3 surfacePos;
    in vec3 camOrigin;
    in vec2 uv;
    layout(location = 0) out vec4 frag_color;
    
    vec3 ToLinear(vec3 srgb)
    {
        bvec3 _55 = lessThan(srgb, vec3(0.040449999272823333740234375));
        vec3 _60 = srgb * vec3(0.077399380505084991455078125);
        vec3 _70 = pow(abs((srgb + vec3(0.054999999701976776123046875)) * vec3(0.94786727428436279296875)), vec3(2.400000095367431640625));
        return vec3(_55.x ? _60.x : _70.x, _55.y ? _60.y : _70.y, _55.z ? _60.z : _70.z);
    }
    
    vec3 ToSrgb(vec3 linearRGB)
    {
        bvec3 _25 = lessThan(linearRGB, vec3(0.00313066854141652584075927734375));
        vec3 _37 = (vec3(1.05499994754791259765625) * pow(abs(linearRGB), vec3(0.4166666567325592041015625))) - vec3(0.054999999701976776123046875);
        vec3 _42 = linearRGB * vec3(12.9200000762939453125);
        return vec3(_25.x ? _42.x : _37.x, _25.y ? _42.y : _37.y, _25.z ? _42.z : _37.z);
    }
    
    void main()
    {
        vec3 param = texture(tex, uv / vec2(textureSize(tex, 0))).xyz;
        vec3 param_1 = ToLinear(param) * abs(dot(normal, normalize(surfacePos - camOrigin)));
        frag_color = vec4(ToSrgb(param_1), 1.0);
    }
    
*/
static const char world_fs_source_glsl330[1148] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x74,0x65,0x78,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x73,0x75,
    0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x33,0x20,0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x3b,0x0a,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x54,0x6f,0x4c,0x69,0x6e,0x65,0x61,
    0x72,0x28,0x76,0x65,0x63,0x33,0x20,0x73,0x72,0x67,0x62,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x62,0x76,0x65,0x63,0x33,0x20,0x5f,0x35,0x35,0x20,0x3d,0x20,0x6c,
    0x65,0x73,0x73,0x54,0x68,0x61,0x6e,0x28,0x73,0x72,0x67,0x62,0x2c,0x20,0x76,0x65,
    0x63,0x33,0x28,0x30,0x2e,0x30,0x34,0x30,0x34,0x34,0x39,0x39,0x39,0x39,0x32,0x37,
    0x32,0x38,0x32,0x33,0x33,0x33,0x33,0x37,0x34,0x30,0x32,0x33,0x34,0x33,0x37,0x35,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x36,0x30,
    0x20,0x3d,0x20,0x73,0x72,0x67,0x62,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x30,0x37,0x37,0x33,0x39,0x39,0x33,0x38,0x30,0x35,0x30,0x35,0x30,0x38,0x34,
    0x39,0x39,0x31,0x34,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x37,0x30,0x20,0x3d,0x20,0x70,0x6f,
    0x77,0x28,0x61,0x62,0x73,0x28,0x28,0x73,0x72,0x67,0x62,0x20,0x2b,0x20,0x76,0x65,
    0x63,0x33,0x28,0x30,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x30,
    0x31,0x39,0x37,0x36,0x37,0x37,0x36,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,0x35,
    0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x39,0x34,0x37,0x38,
    0x36,0x37,0x32,0x37,0x34,0x32,0x38,0x34,0x33,0x36,0x32,0x37,0x39,0x32,0x39,0x36,
    0x38,0x37,0x35,0x29,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x32,0x2e,0x34,0x30,
    0x30,0x30,0x30,0x30,0x30,0x39,0x35,0x33,0x36,0x37,0x34,0x33,0x31,0x36,0x34,0x30,
    0x36,0x32,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x35,0x35,0x2e,0x78,0x20,0x3f,0x20,0x5f,
    0x36,0x30,0x2e,0x78,0x20,0x3a,0x20,0x5f,0x37,0x30,0x2e,0x78,0x2c,0x20,0x5f,0x35,
    0x35,0x2e,0x79,0x20,0x3f,0x20,0x5f,0x36,0x30,0x2e,0x79,0x20,0x3a,0x20,0x5f,0x37,
    0x30,0x2e,0x79,0x2c,0x20,0x5f,0x35,0x35,0x2e,0x7a,0x20,0x3f,0x20,0x5f,0x36,0x30,
    0x2e,0x7a,0x20,0x3a,0x20,0x5f,0x37,0x30,0x2e,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x65,0x63,0x33,0x20,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x76,0x65,0x63,0x33,
    0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x62,0x76,0x65,0x63,0x33,0x20,0x5f,0x32,0x35,0x20,0x3d,0x20,0x6c,0x65,
    0x73,0x73,0x54,0x68,0x61,0x6e,0x28,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x30,0x33,0x31,0x33,0x30,0x36,
    0x36,0x38,0x35,0x34,0x31,0x34,0x31,0x36,0x35,0x32,0x35,0x38,0x34,0x30,0x37,0x35,
    0x39,0x32,0x37,0x37,0x33,0x34,0x33,0x37,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,0x37,0x20,0x3d,0x20,0x28,0x76,0x65,0x63,
    0x33,0x28,0x31,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x34,0x37,0x35,0x34,0x37,
    0x39,0x31,0x32,0x35,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x20,0x2a,0x20,0x70,
    0x6f,0x77,0x28,0x61,0x62,0x73,0x28,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,
    0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x34,0x31,0x36,0x36,0x36,0x36,
    0x36,0x35,0x36,0x37,0x33,0x32,0x35,0x35,0x39,0x32,0x30,0x34,0x31,0x30,0x31,0x35,
    0x36,0x32,0x35,0x29,0x29,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,
    0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x30,0x31,0x39,0x37,0x36,0x37,
    0x37,0x36,0x31,0x32,0x33,0x30,0x34,0x36,0x38,0x37,0x35,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x34,0x32,0x20,0x3d,0x20,0x6c,0x69,0x6e,
    0x65,0x61,0x72,0x52,0x47,0x42,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x32,
    0x2e,0x39,0x32,0x30,0x30,0x30,0x30,0x30,0x37,0x36,0x32,0x39,0x33,0x39,0x34,0x35,
    0x33,0x31,0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x32,0x35,0x2e,0x78,0x20,0x3f,0x20,0x5f,
    0x34,0x32,0x2e,0x78,0x20,0x3a,0x20,0x5f,0x33,0x37,0x2e,0x78,0x2c,0x20,0x5f,0x32,
    0x35,0x2e,0x79,0x20,0x3f,0x20,0x5f,0x34,0x32,0x2e,0x79,0x20,0x3a,0x20,0x5f,0x33,
    0x37,0x2e,0x79,0x2c,0x20,0x5f,0x32,0x35,0x2e,0x7a,0x20,0x3f,0x20,0x5f,0x34,0x32,
    0x2e,0x7a,0x20,0x3a,0x20,0x5f,0x33,0x37,0x2e,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x2c,0x20,0x75,0x76,0x20,0x2f,
    0x20,0x76,0x65,0x63,0x32,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,
    0x65,0x28,0x74,0x65,0x78,0x2c,0x20,0x30,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x20,0x3d,0x20,0x54,0x6f,0x4c,0x69,0x6e,0x65,0x61,0x72,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x29,0x20,0x2a,0x20,0x61,0x62,0x73,0x28,0x64,0x6f,0x74,0x28,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,
    0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x2d,0x20,0x63,0x61,0x6d,
    0x4f,0x72,0x69,0x67,0x69,0x6e,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    cbuffer world_vs_params : register(b0)
    {
        row_major float4x4 _22_mvp : packoffset(c0);
        float3 _22_uCamOrigin : packoffset(c4);
    };
    
    
    static float4 gl_Position;
    static float3 iPos;
    static float2 uv;
    static float2 iUv;
    static float3 normal;
    static float3 iNormal;
    static float3 camOrigin;
    static float3 surfacePos;
    
    struct SPIRV_Cross_Input
    {
        float3 iPos : TEXCOORD0;
        float3 iNormal : TEXCOORD1;
        float2 iUv : TEXCOORD2;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 uv : TEXCOORD0;
        float3 normal : TEXCOORD1;
        float3 camOrigin : TEXCOORD2;
        float3 surfacePos : TEXCOORD3;
        float4 gl_Position : SV_Position;
    };
    
    #line 23 "code/shaders/world.glsl"
    void vert_main()
    {
    #line 23 "code/shaders/world.glsl"
        gl_Position = mul(float4(iPos, 1.0f), _22_mvp);
    #line 24 "code/shaders/world.glsl"
        uv = iUv;
    #line 25 "code/shaders/world.glsl"
        normal = iNormal;
    #line 26 "code/shaders/world.glsl"
        camOrigin = _22_uCamOrigin;
    #line 27 "code/shaders/world.glsl"
        surfacePos = iPos;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        iPos = stage_input.iPos;
        iUv = stage_input.iUv;
        iNormal = stage_input.iNormal;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.uv = uv;
        stage_output.normal = normal;
        stage_output.camOrigin = camOrigin;
        stage_output.surfacePos = surfacePos;
        return stage_output;
    }
*/
static const uint8_t world_vs_bytecode_hlsl4[1060] = {
    0x44,0x58,0x42,0x43,0xc5,0xa5,0xf0,0x66,0x61,0x5b,0x48,0xbb,0x38,0x90,0xaf,0x41,
    0x19,0x0e,0xb3,0xfb,0x01,0x00,0x00,0x00,0x24,0x04,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0x30,0x01,0x00,0x00,0x94,0x01,0x00,0x00,0x34,0x02,0x00,0x00,
    0xa8,0x03,0x00,0x00,0x52,0x44,0x45,0x46,0xf4,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x4c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x04,0xfe,0xff,
    0x10,0x81,0x00,0x00,0xcc,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x00,0x3c,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x64,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x94,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x9c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xac,0x00,0x00,0x00,0x40,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0xbc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x5f,0x32,0x32,0x5f,0x6d,0x76,0x70,0x00,0x02,0x00,0x03,0x00,0x04,0x00,0x04,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5f,0x32,0x32,0x5f,0x75,0x43,0x61,0x6d,
    0x4f,0x72,0x69,0x67,0x69,0x6e,0x00,0xab,0x01,0x00,0x03,0x00,0x01,0x00,0x03,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,
    0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,
    0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x20,0x31,0x30,0x2e,0x31,0x00,
    0x49,0x53,0x47,0x4e,0x5c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x07,0x07,0x00,0x00,0x50,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x07,0x07,0x00,0x00,
    0x50,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,0x98,0x00,0x00,0x00,0x05,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0c,0x00,0x00,0x80,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x07,0x08,0x00,0x00,0x80,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x08,0x00,0x00,0x80,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x07,0x08,0x00,0x00,0x89,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x00,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x00,0xab,0xab,0xab,0x53,0x48,0x44,0x52,0x6c,0x01,0x00,0x00,0x40,0x00,0x01,0x00,
    0x5b,0x00,0x00,0x00,0x59,0x00,0x00,0x04,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,0x72,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    0x5f,0x00,0x00,0x03,0x72,0x10,0x10,0x00,0x01,0x00,0x00,0x00,0x5f,0x00,0x00,0x03,
    0x32,0x10,0x10,0x00,0x02,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0x32,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0x72,0x20,0x10,0x00,0x01,0x00,0x00,0x00,
    0x65,0x00,0x00,0x03,0x72,0x20,0x10,0x00,0x02,0x00,0x00,0x00,0x65,0x00,0x00,0x03,
    0x72,0x20,0x10,0x00,0x03,0x00,0x00,0x00,0x67,0x00,0x00,0x04,0xf2,0x20,0x10,0x00,
    0x04,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x68,0x00,0x00,0x02,0x01,0x00,0x00,0x00,
    0x36,0x00,0x00,0x05,0x32,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,
    0x02,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x72,0x20,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x12,0x10,0x00,0x01,0x00,0x00,0x00,0x36,0x00,0x00,0x06,0x72,0x20,0x10,0x00,
    0x02,0x00,0x00,0x00,0x46,0x82,0x20,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
    0x36,0x00,0x00,0x05,0x72,0x20,0x10,0x00,0x03,0x00,0x00,0x00,0x46,0x12,0x10,0x00,
    0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x56,0x15,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x06,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0a,
    0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0xa6,0x1a,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x46,0x0e,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0xf2,0x20,0x10,0x00,0x04,0x00,0x00,0x00,
    0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x74,0x00,0x00,0x00,
    0x09,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,
};
/*
    Texture2D<float4> tex : register(t0);
    SamplerState _tex_sampler : register(s0);
    
    static float3 normal;
    static float3 surfacePos;
    static float3 camOrigin;
    static float2 uv;
    static float4 frag_color;
    
    struct SPIRV_Cross_Input
    {
        float2 uv : TEXCOORD0;
        float3 normal : TEXCOORD1;
        float3 camOrigin : TEXCOORD2;
        float3 surfacePos : TEXCOORD3;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };
    
    uint2 spvTextureSize(Texture2D<float4> Tex, uint Level, out uint Param)
    {
        uint2 ret;
        Tex.GetDimensions(Level, ret.x, ret.y, Param);
        return ret;
    }
    
    #line 19 "code/shaders/world.glsl"
    float3 ToLinear(float3 srgb)
    {
    #line 19 "code/shaders/world.glsl"
        bool3 _55 = bool3(srgb.x < 0.040449999272823333740234375f.xxx.x, srgb.y < 0.040449999272823333740234375f.xxx.y, srgb.z < 0.040449999272823333740234375f.xxx.z);
    #line 20 "code/shaders/world.glsl"
        float3 _60 = srgb * 0.077399380505084991455078125f.xxx;
    #line 21 "code/shaders/world.glsl"
        float3 _70 = pow(abs((srgb + 0.054999999701976776123046875f.xxx) * 0.94786727428436279296875f.xxx), 2.400000095367431640625f.xxx);
    #line 23 "code/shaders/world.glsl"
    #line 24 "code/shaders/world.glsl"
        return float3(_55.x ? _60.x : _70.x, _55.y ? _60.y : _70.y, _55.z ? _60.z : _70.z);
    }
    
    #line 9 "code/shaders/world.glsl"
    float3 ToSrgb(float3 linearRGB)
    {
    #line 9 "code/shaders/world.glsl"
        bool3 _25 = bool3(linearRGB.x < 0.00313066854141652584075927734375f.xxx.x, linearRGB.y < 0.00313066854141652584075927734375f.xxx.y, linearRGB.z < 0.00313066854141652584075927734375f.xxx.z);
    #line 10 "code/shaders/world.glsl"
        float3 _37 = (1.05499994754791259765625f.xxx * pow(abs(linearRGB), 0.4166666567325592041015625f.xxx)) - 0.054999999701976776123046875f.xxx;
    #line 11 "code/shaders/world.glsl"
        float3 _42 = linearRGB * 12.9200000762939453125f.xxx;
    #line 13 "code/shaders/world.glsl"
    #line 14 "code/shaders/world.glsl"
        return float3(_25.x ? _42.x : _37.x, _25.y ? _42.y : _37.y, _25.z ? _42.z : _37.z);
    }
    
    #line 36 "code/shaders/world.glsl"
    void frag_main()
    {
    #line 36 "code/shaders/world.glsl"
    #line 37 "code/shaders/world.glsl"
        uint _107_dummy_parameter;
        float3 param = tex.Sample(_tex_sampler, uv / float2(int2(spvTextureSize(tex, uint(0), _107_dummy_parameter)))).xyz;
    #line 38 "code/shaders/world.glsl"
    #line 39 "code/shaders/world.glsl"
        float3 param_1 = ToLinear(param) * abs(dot(normal, normalize(surfacePos - camOrigin)));
    #line 41 "code/shaders/world.glsl"
        frag_color = float4(ToSrgb(param_1), 1.0f);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        normal = stage_input.normal;
        surfacePos = stage_input.surfacePos;
        camOrigin = stage_input.camOrigin;
        uv = stage_input.uv;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
static const uint8_t world_fs_bytecode_hlsl4[1468] = {
    0x44,0x58,0x42,0x43,0x15,0xad,0x55,0xa9,0x07,0xd8,0x19,0xc4,0xe5,0xf0,0x4a,0xd9,
    0xcb,0xb9,0x50,0x41,0x01,0x00,0x00,0x00,0xbc,0x05,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0xd4,0x00,0x00,0x00,0x50,0x01,0x00,0x00,0x84,0x01,0x00,0x00,
    0x40,0x05,0x00,0x00,0x52,0x44,0x45,0x46,0x98,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x1c,0x00,0x00,0x00,0x00,0x04,0xff,0xff,
    0x10,0x81,0x00,0x00,0x6d,0x00,0x00,0x00,0x5c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x69,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x5f,0x74,0x65,0x78,0x5f,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x00,0x74,0x65,0x78,0x00,0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,
    0x66,0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,0x20,0x53,0x68,0x61,0x64,
    0x65,0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x20,0x31,0x30,0x2e,0x31,
    0x00,0xab,0xab,0xab,0x49,0x53,0x47,0x4e,0x74,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x68,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x07,0x07,0x00,0x00,0x68,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x07,0x07,0x00,0x00,0x68,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x07,0x07,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0xab,0xab,0xab,
    0x4f,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,
    0x74,0x00,0xab,0xab,0x53,0x48,0x44,0x52,0xb4,0x03,0x00,0x00,0x40,0x00,0x00,0x00,
    0xed,0x00,0x00,0x00,0x5a,0x00,0x00,0x03,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,
    0x58,0x18,0x00,0x04,0x00,0x70,0x10,0x00,0x00,0x00,0x00,0x00,0x55,0x55,0x00,0x00,
    0x62,0x10,0x00,0x03,0x32,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x62,0x10,0x00,0x03,
    0x72,0x10,0x10,0x00,0x01,0x00,0x00,0x00,0x62,0x10,0x00,0x03,0x72,0x10,0x10,0x00,
    0x02,0x00,0x00,0x00,0x62,0x10,0x00,0x03,0x72,0x10,0x10,0x00,0x03,0x00,0x00,0x00,
    0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x68,0x00,0x00,0x02,
    0x03,0x00,0x00,0x00,0x3d,0x10,0x00,0x07,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x2b,0x00,0x00,0x05,0x32,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x07,0x32,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x45,0x00,0x00,0x09,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0xae,0x47,0x61,0x3d,
    0xae,0x47,0x61,0x3d,0xae,0x47,0x61,0x3d,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x0a,
    0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x6e,0xa7,0x72,0x3f,0x6e,0xa7,0x72,0x3f,0x6e,0xa7,0x72,0x3f,
    0x00,0x00,0x00,0x00,0x2f,0x00,0x00,0x06,0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x02,0x10,0x80,0x81,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x38,0x00,0x00,0x0a,
    0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x9a,0x99,0x19,0x40,0x9a,0x99,0x19,0x40,0x9a,0x99,0x19,0x40,
    0x00,0x00,0x00,0x00,0x19,0x00,0x00,0x05,0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x31,0x00,0x00,0x0a,0x72,0x00,0x10,0x00,
    0x02,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0xe6,0xae,0x25,0x3d,0xe6,0xae,0x25,0x3d,0xe6,0xae,0x25,0x3d,0x00,0x00,0x00,0x00,
    0x38,0x00,0x00,0x0a,0x72,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,
    0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x91,0x83,0x9e,0x3d,0x91,0x83,0x9e,0x3d,
    0x91,0x83,0x9e,0x3d,0x00,0x00,0x00,0x00,0x37,0x00,0x00,0x09,0x72,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x02,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
    0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x12,0x10,0x80,0x41,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x46,0x12,0x10,0x00,0x03,0x00,0x00,0x00,0x10,0x00,0x00,0x07,
    0x82,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x44,0x00,0x00,0x05,0x82,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x07,
    0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0xf6,0x0f,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x10,0x00,0x00,0x07,0x82,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x12,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x02,0x10,0x00,
    0x01,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0x72,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0xf6,0x0f,0x10,0x80,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,
    0x00,0x00,0x00,0x00,0x2f,0x00,0x00,0x06,0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x02,0x10,0x80,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x0a,
    0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x55,0x55,0xd5,0x3e,0x55,0x55,0xd5,0x3e,0x55,0x55,0xd5,0x3e,
    0x00,0x00,0x00,0x00,0x19,0x00,0x00,0x05,0x72,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x32,0x00,0x00,0x0f,0x72,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0x3d,0x0a,0x87,0x3f,0x3d,0x0a,0x87,0x3f,0x3d,0x0a,0x87,0x3f,0x00,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0xae,0x47,0x61,0xbd,0xae,0x47,0x61,0xbd,0xae,0x47,0x61,0xbd,
    0x00,0x00,0x00,0x00,0x31,0x00,0x00,0x0a,0x72,0x00,0x10,0x00,0x02,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0xe7,0x2b,0x4d,0x3b,
    0xe7,0x2b,0x4d,0x3b,0xe7,0x2b,0x4d,0x3b,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x0a,
    0x72,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,
    0x02,0x40,0x00,0x00,0x52,0xb8,0x4e,0x41,0x52,0xb8,0x4e,0x41,0x52,0xb8,0x4e,0x41,
    0x00,0x00,0x00,0x00,0x37,0x00,0x00,0x09,0x72,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x02,0x00,0x00,0x00,0x46,0x02,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x82,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,0x3e,0x00,0x00,0x01,
    0x53,0x54,0x41,0x54,0x74,0x00,0x00,0x00,0x1b,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct world_vs_params
    {
        float4x4 mvp;
        float3 uCamOrigin;
    };
    
    struct main0_out
    {
        float2 uv [[user(locn0)]];
        float3 normal [[user(locn1)]];
        float3 camOrigin [[user(locn2)]];
        float3 surfacePos [[user(locn3)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float3 iPos [[attribute(0)]];
        float3 iNormal [[attribute(1)]];
        float2 iUv [[attribute(2)]];
    };
    
    #line 23 "code/shaders/world.glsl"
    vertex main0_out main0(main0_in in [[stage_in]], constant world_vs_params& _22 [[buffer(0)]])
    {
        main0_out out = {};
    #line 23 "code/shaders/world.glsl"
        out.gl_Position = _22.mvp * float4(in.iPos, 1.0);
    #line 24 "code/shaders/world.glsl"
        out.uv = in.iUv;
    #line 25 "code/shaders/world.glsl"
        out.normal = in.iNormal;
    #line 26 "code/shaders/world.glsl"
        out.camOrigin = _22.uCamOrigin;
    #line 27 "code/shaders/world.glsl"
        out.surfacePos = in.iPos;
        return out;
    }
    
*/
static const char world_vs_source_metal_macos[991] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x77,
    0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x6d,0x76,
    0x70,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x75,0x43,
    0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,
    0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x61,
    0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x33,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x69,0x50,0x6f,0x73,0x20,0x5b,0x5b,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x69,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x20,
    0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x69,0x55,0x76,
    0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x32,0x29,0x5d,
    0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x33,0x20,
    0x22,0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,
    0x72,0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x61,0x6e,0x74,0x20,0x77,0x6f,0x72,0x6c,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x26,0x20,0x5f,0x32,0x32,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,
    0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x33,0x20,0x22,0x63,0x6f,0x64,0x65,
    0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x32,0x2e,0x6d,
    0x76,0x70,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x69,0x6e,0x2e,0x69,
    0x50,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x32,0x34,0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,
    0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x2e,0x75,0x76,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x69,0x55,
    0x76,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x35,0x20,0x22,0x63,0x6f,0x64,
    0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x69,0x4e,0x6f,0x72,0x6d,0x61,
    0x6c,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x36,0x20,0x22,0x63,0x6f,0x64,
    0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x63,0x61,
    0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x20,0x3d,0x20,0x5f,0x32,0x32,0x2e,0x75,0x43,
    0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x32,0x37,0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,
    0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,
    0x3d,0x20,0x69,0x6e,0x2e,0x69,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"
    
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };
    
    struct main0_in
    {
        float2 uv [[user(locn0)]];
        float3 normal [[user(locn1)]];
        float3 camOrigin [[user(locn2)]];
        float3 surfacePos [[user(locn3)]];
    };
    
    #line 19 "code/shaders/world.glsl"
    static inline __attribute__((always_inline))
    float3 ToLinear(thread const float3& srgb)
    {
    #line 19 "code/shaders/world.glsl"
    #line 20 "code/shaders/world.glsl"
    #line 21 "code/shaders/world.glsl"
    #line 23 "code/shaders/world.glsl"
    #line 24 "code/shaders/world.glsl"
        return select(pow(abs((srgb + float3(0.054999999701976776123046875)) * float3(0.94786727428436279296875)), float3(2.400000095367431640625)), srgb * float3(0.077399380505084991455078125), srgb < float3(0.040449999272823333740234375));
    }
    
    #line 9 "code/shaders/world.glsl"
    static inline __attribute__((always_inline))
    float3 ToSrgb(thread const float3& linearRGB)
    {
    #line 9 "code/shaders/world.glsl"
    #line 10 "code/shaders/world.glsl"
    #line 11 "code/shaders/world.glsl"
    #line 13 "code/shaders/world.glsl"
    #line 14 "code/shaders/world.glsl"
        return select((float3(1.05499994754791259765625) * pow(abs(linearRGB), float3(0.4166666567325592041015625))) - float3(0.054999999701976776123046875), linearRGB * float3(12.9200000762939453125), linearRGB < float3(0.00313066854141652584075927734375));
    }
    
    #line 36 "code/shaders/world.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> tex [[texture(0)]], sampler texSmplr [[sampler(0)]])
    {
        main0_out out = {};
    #line 36 "code/shaders/world.glsl"
    #line 37 "code/shaders/world.glsl"
        float3 param = tex.sample(texSmplr, (in.uv / float2(int2(tex.get_width(), tex.get_height())))).xyz;
    #line 38 "code/shaders/world.glsl"
    #line 39 "code/shaders/world.glsl"
        float3 param_1 = ToLinear(param) * abs(dot(in.normal, fast::normalize(in.surfacePos - in.camOrigin)));
    #line 41 "code/shaders/world.glsl"
        out.frag_color = float4(ToSrgb(param_1), 1.0);
        return out;
    }
    
*/
static const char world_fs_source_metal_macos[2092] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,0x6c,0x6f,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,
    0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x20,0x5b,0x5b,0x75,0x73,
    0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x5b,
    0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x63,0x61,0x6d,0x4f,0x72,
    0x69,0x67,0x69,0x6e,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,
    0x32,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x20,0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,
    0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x33,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,
    0x73,0x6c,0x22,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,
    0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,
    0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,
    0x0a,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x54,0x6f,0x4c,0x69,0x6e,0x65,0x61,0x72,
    0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x26,0x20,0x73,0x72,0x67,0x62,0x29,0x0a,0x7b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,
    0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x30,0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,
    0x73,0x6c,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x31,0x20,0x22,0x63,0x6f,
    0x64,0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x33,0x20,
    0x22,0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,
    0x72,0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x32,0x34,0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,
    0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x65,0x6c,0x65,0x63,0x74,0x28,0x70,
    0x6f,0x77,0x28,0x61,0x62,0x73,0x28,0x28,0x73,0x72,0x67,0x62,0x20,0x2b,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x39,
    0x39,0x37,0x30,0x31,0x39,0x37,0x36,0x37,0x37,0x36,0x31,0x32,0x33,0x30,0x34,0x36,
    0x38,0x37,0x35,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,
    0x2e,0x39,0x34,0x37,0x38,0x36,0x37,0x32,0x37,0x34,0x32,0x38,0x34,0x33,0x36,0x32,
    0x37,0x39,0x32,0x39,0x36,0x38,0x37,0x35,0x29,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x32,0x2e,0x34,0x30,0x30,0x30,0x30,0x30,0x30,0x39,0x35,0x33,0x36,
    0x37,0x34,0x33,0x31,0x36,0x34,0x30,0x36,0x32,0x35,0x29,0x29,0x2c,0x20,0x73,0x72,
    0x67,0x62,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x37,
    0x37,0x33,0x39,0x39,0x33,0x38,0x30,0x35,0x30,0x35,0x30,0x38,0x34,0x39,0x39,0x31,
    0x34,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x29,0x2c,0x20,0x73,0x72,0x67,0x62,
    0x20,0x3c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x34,0x30,0x34,
    0x34,0x39,0x39,0x39,0x39,0x32,0x37,0x32,0x38,0x32,0x33,0x33,0x33,0x33,0x37,0x34,
    0x30,0x32,0x33,0x34,0x33,0x37,0x35,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x39,0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,0x64,
    0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,
    0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x74,0x68,0x72,0x65,0x61,
    0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x26,0x20,
    0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x39,0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,0x64,0x65,
    0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x23,
    0x6c,0x69,0x6e,0x65,0x20,0x31,0x30,0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,
    0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,
    0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x31,0x20,0x22,0x63,0x6f,0x64,0x65,
    0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,0x63,
    0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,
    0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x34,
    0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,
    0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x65,0x6c,0x65,0x63,0x74,0x28,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x28,0x31,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x34,0x37,
    0x35,0x34,0x37,0x39,0x31,0x32,0x35,0x39,0x37,0x36,0x35,0x36,0x32,0x35,0x29,0x20,
    0x2a,0x20,0x70,0x6f,0x77,0x28,0x61,0x62,0x73,0x28,0x6c,0x69,0x6e,0x65,0x61,0x72,
    0x52,0x47,0x42,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x34,
    0x31,0x36,0x36,0x36,0x36,0x36,0x35,0x36,0x37,0x33,0x32,0x35,0x35,0x39,0x32,0x30,
    0x34,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x29,0x29,0x29,0x20,0x2d,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x35,0x34,0x39,0x39,0x39,0x39,0x39,0x39,
    0x37,0x30,0x31,0x39,0x37,0x36,0x37,0x37,0x36,0x31,0x32,0x33,0x30,0x34,0x36,0x38,
    0x37,0x35,0x29,0x2c,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,0x20,0x2a,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x31,0x32,0x2e,0x39,0x32,0x30,0x30,0x30,
    0x30,0x30,0x37,0x36,0x32,0x39,0x33,0x39,0x34,0x35,0x33,0x31,0x32,0x35,0x29,0x2c,
    0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x52,0x47,0x42,0x20,0x3c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x28,0x30,0x2e,0x30,0x30,0x33,0x31,0x33,0x30,0x36,0x36,0x38,0x35,
    0x34,0x31,0x34,0x31,0x36,0x35,0x32,0x35,0x38,0x34,0x30,0x37,0x35,0x39,0x32,0x37,
    0x37,0x33,0x34,0x33,0x37,0x35,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x33,0x36,0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,0x64,
    0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,
    0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x74,0x65,0x78,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,
    0x74,0x65,0x78,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,
    0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x36,0x20,0x22,0x63,0x6f,0x64,
    0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x37,0x20,0x22,
    0x63,0x6f,0x64,0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,
    0x6c,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x74,0x65,0x78,0x53,0x6d,0x70,0x6c,0x72,0x2c,
    0x20,0x28,0x69,0x6e,0x2e,0x75,0x76,0x20,0x2f,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x69,0x6e,0x74,0x32,0x28,0x74,0x65,0x78,0x2e,0x67,0x65,0x74,0x5f,0x77,0x69,
    0x64,0x74,0x68,0x28,0x29,0x2c,0x20,0x74,0x65,0x78,0x2e,0x67,0x65,0x74,0x5f,0x68,
    0x65,0x69,0x67,0x68,0x74,0x28,0x29,0x29,0x29,0x29,0x29,0x2e,0x78,0x79,0x7a,0x3b,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x38,0x20,0x22,0x63,0x6f,0x64,0x65,0x2f,
    0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,0x6c,
    0x73,0x6c,0x22,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x39,0x20,0x22,0x63,0x6f,
    0x64,0x65,0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x54,0x6f,0x4c,0x69,
    0x6e,0x65,0x61,0x72,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x20,0x2a,0x20,0x61,0x62,
    0x73,0x28,0x64,0x6f,0x74,0x28,0x69,0x6e,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,
    0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,
    0x28,0x69,0x6e,0x2e,0x73,0x75,0x72,0x66,0x61,0x63,0x65,0x50,0x6f,0x73,0x20,0x2d,
    0x20,0x69,0x6e,0x2e,0x63,0x61,0x6d,0x4f,0x72,0x69,0x67,0x69,0x6e,0x29,0x29,0x29,
    0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x31,0x20,0x22,0x63,0x6f,0x64,0x65,
    0x2f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2f,0x77,0x6f,0x72,0x6c,0x64,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x28,0x54,0x6f,0x53,0x72,0x67,0x62,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before world.h"
#endif
static inline const sg_shader_desc* world_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "iPos";
      desc.attrs[1].name = "iNormal";
      desc.attrs[2].name = "iUv";
      desc.vs.source = world_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 80;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "world_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 5;
      desc.fs.source = world_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "tex";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "world_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_D3D11) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].sem_name = "TEXCOORD";
      desc.attrs[0].sem_index = 0;
      desc.attrs[1].sem_name = "TEXCOORD";
      desc.attrs[1].sem_index = 1;
      desc.attrs[2].sem_name = "TEXCOORD";
      desc.attrs[2].sem_index = 2;
      desc.vs.bytecode.ptr = world_vs_bytecode_hlsl4;
      desc.vs.bytecode.size = 1060;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 80;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.bytecode.ptr = world_fs_bytecode_hlsl4;
      desc.fs.bytecode.size = 1468;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "tex";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "world_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = world_vs_source_metal_macos;
      desc.vs.entry = "main0";
      desc.vs.uniform_blocks[0].size = 80;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.source = world_fs_source_metal_macos;
      desc.fs.entry = "main0";
      desc.fs.images[0].name = "tex";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "world_shader";
    }
    return &desc;
  }
  return 0;
}
